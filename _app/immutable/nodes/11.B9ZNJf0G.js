import{f as c,a as d,c as be}from"../chunks/D2zScKY8.js";import{i as fe}from"../chunks/R7vl4N9D.js";import{o as he}from"../chunks/qGwdzSrR.js";import{p as ye,g as e,b as _e,$ as Se,s as v,c as s,d as D,m as K,x as we,u as a,r as t,y as ke,z as Ce,t as x,A as Pe,e as C,f as Te,B as Ae}from"../chunks/CiIIHQbA.js";import{s as g}from"../chunks/jtbSRi3C.js";import{i as P}from"../chunks/I43V2O9d.js";import{e as X,i as Y}from"../chunks/BamrPQqp.js";import{h as Re,e as Ne}from"../chunks/CV1XcBYO.js";import{r as De,a as j}from"../chunks/DB3IftJ4.js";import{b as Me}from"../chunks/B8mJ-AsI.js";import"../chunks/_3o_K0Cw.js";import{g as T}from"../chunks/DWruIgvO.js";var Ee=c("<span> </span>"),Fe=c('<span class="c(gray-400)">...</span>'),Ie=c('<code class="c(gray-600) block whitespace(pre-wrap) text(left)"> </code>'),Oe=c('<code class="c(red-600)"> </code>'),Ve=c('<span class="c(gray-400)">Loading...</span>'),ze=c('<tr><td class="text(center)"><!></td><td class="font(mono)"><code class="c(purple-700) bg(purple-50) px(xs) py(1) radius(sm)"> </code></td><td> </td><td class="font(mono) text(xs)"><!></td></tr>'),Be=c('<section><h2 class="heading heading(md) mb(lg)"> </h2> <div class="table-wrapper"><table class="table table-fixed"><thead><tr><th class="text(center) w(60)">Parse</th><th class="w(250)">Pattern</th><th class="w(400)">Description</th><th>CSS Output</th></tr></thead><tbody></tbody></table></div></section>'),Ge=c('<pre class="font(mono) text(xs) c(gray-700) whitespace(pre-wrap)"> </pre>'),He=c('<pre class="font(mono) text(xs) c(red-600)"> </pre>'),Ke=c("<div><div> </div> <!></div>"),je=c('<div class="section(xl) p(5xl)"><div><header class="prose prose(center) mb(xl)"><h1 class="heading heading(lg)">Parser Syntax Test</h1> <p class="body c(gray-600)">Comprehensive test of AdorableCSS parser patterns and edge cases</p></header> <div class="vbox gap(2xl)"></div> <section class="card mt(2xl)"><h2 class="heading heading(md) mb(lg)">Test Custom Pattern</h2> <div class="hbox gap(lg)"><input type="text" placeholder="Enter any pattern to test..." class="flex(1) p(md) border(1/gray-300) radius(md) font(mono)"/> <div class="flex(1)"><!></div></div></section> <section class="prose mt(2xl)"><h2 class="heading heading(md)">Parser Rules</h2> <div class="grid(1) md:grid(3) gap(lg) mt(lg)"><div class="card"><h3 class="label mb(sm)">Separators</h3> <ul class="vbox gap(xs) text(sm)"><li><code class="font(mono) bg(gray-100) px(xs)">/</code> - Multiple values</li> <li><code class="font(mono) bg(gray-100) px(xs)">+</code> - Combined values</li> <li><code class="font(mono) bg(gray-100) px(xs)">:</code> - Key-value pairs</li> <li><code class="font(mono) bg(gray-100) px(xs)">..</code> - Ranges/gradients</li> <li><code class="font(mono) bg(gray-100) px(xs)">.</code> - Opacity notation</li></ul></div> <div class="card"><h3 class="label mb(sm)">Prefixes</h3> <ul class="vbox gap(xs) text(sm)"><li><code class="font(mono) bg(gray-100) px(xs)">hover:</code> - Hover state</li> <li><code class="font(mono) bg(gray-100) px(xs)">md:</code> - Responsive</li> <li><code class="font(mono) bg(gray-100) px(xs)">!</code> - Important</li> <li><code class="font(mono) bg(gray-100) px(xs)">group-</code> - Group state</li> <li><code class="font(mono) bg(gray-100) px(xs)">..</code> - Range prefix</li></ul></div> <div class="card"><h3 class="label mb(sm)">Special Values</h3> <ul class="vbox gap(xs) text(sm)"><li><code class="font(mono) bg(gray-100) px(xs)">auto</code> - Auto keyword</li> <li><code class="font(mono) bg(gray-100) px(xs)">none</code> - None keyword</li> <li><code class="font(mono) bg(gray-100) px(xs)">full</code> - 100% token</li> <li><code class="font(mono) bg(gray-100) px(xs)">16:9</code> - Aspect ratio</li> <li><code class="font(mono) bg(gray-100) px(xs)">100%-20</code> - Calc</li></ul></div></div></section></div></div>');function st(ee,te){ye(te,!1);const M={"Basic Syntax":[{input:"relative",description:"Keyword rule without arguments"},{input:"w(full)",description:"Single value"},{input:"p(10)",description:"Numeric value"},{input:"w(100px)",description:"Value with unit"},{input:"p(md)",description:"Token reference"},{input:"btn-primary",description:"Hyphenated rule name"},{input:"inline_block",description:"Underscored rule name"}],"Multiple Values":[{input:"p(10/20)",description:"Slash separator"},{input:"border(1/solid/gray-200)",description:"Multiple slash values"},{input:"p(10/20/30/40)",description:"Four values"},{input:"font(16/1.5)",description:"Numeric slash values"},{input:"font(lg/1.6/-1%)",description:"Token slash values"}],"Complex Values":[{input:"hbox(top+left)",description:"Plus operator (combine values)"},{input:"layer(top:20)",description:"Colon separator (key:value)"},{input:"layer(center)",description:"Single position value"},{input:"layer(top:10/left:20)",description:"Multiple key-value pairs (slash separated)"},{input:"layer(fill/20)",description:"Combined position and z-index"}],"Gradients & Ranges":[{input:"bg(red..blue)",description:"Range/gradient syntax"},{input:"bg(purple-500..pink-500)",description:"Color gradient"},{input:"bg(90deg/red..blue)",description:"Directional gradient"},{input:"bg(135deg/purple-500..pink-500)",description:"Angle gradient"},{input:"bg(to-tr/red..blue)",description:"Keyword direction gradient"},{input:"c(45deg/purple-500..pink-500)",description:"Text gradient"}],"Opacity Notation":[{input:"c(red.5)",description:"Dot opacity (50%)"},{input:"bg(black.1)",description:"Dot opacity (10%)"},{input:"c(blue-500.05)",description:"Dot opacity (5%)"},{input:"bg(primary.8)",description:"Token with opacity"},{input:"border(1/gray-200.5)",description:"Border with opacity"}],Calculations:[{input:"w(100%-20)",description:"Percentage minus pixels"},{input:"h(50%+10)",description:"Percentage plus pixels"},{input:"w(full-20)",description:"Token with calculation"},{input:"h(100vh-60)",description:"Viewport units calculation"}],"State Prefixes":[{input:"hover:scale(1.05)",description:"Hover state"},{input:"focus:ring(2/blue-500)",description:"Focus state"},{input:"active:scale(0.95)",description:"Active state"},{input:"disabled:opacity(0.5)",description:"Disabled state"},{input:"checked:bg(blue-500)",description:"Checked state"},{input:"hover:focus:c(blue-700)",description:"Multiple states"}],"Responsive Prefixes":[{input:"sm:hidden",description:"Small breakpoint"},{input:"md:w(full)",description:"Medium breakpoint"},{input:"lg:grid(4)",description:"Large breakpoint"},{input:"xl:text(2xl)",description:"Extra large breakpoint"},{input:"..md:hidden",description:"Up to medium"},{input:"md..lg:block",description:"Between medium and large"}],"Special Syntax":[{input:"size(16:9)",description:"Aspect ratio"},{input:"size(320x200)",description:"Dimensions"},{input:"w(auto)",description:"Auto keyword"},{input:"display(none)",description:"None keyword"},{input:"c(inherit)",description:"Inherit keyword"},{input:"bg(red)!",description:"Important modifier"}],"Nested & Combined":[{input:"hover:md:scale(1.1)",description:"State + responsive"},{input:"md:hover:bg(gray-100)",description:"Responsive + state"},{input:"group-hover:opacity(1)",description:"Group hover"},{input:"peer-focus:ring(2)",description:"Peer focus"},{input:"w(full)!",description:"Rule with important"}],"Edge Cases":[{input:"p()",description:"Empty parentheses"},{input:"p( )",description:"Whitespace in parentheses"},{input:"p(0)",description:"Zero value"},{input:"mt(-10)",description:"Negative value"},{input:"c(--custom-var)",description:"CSS variable"},{input:"w(calc(100%-20px))",description:"CSS calc function"}]};let h=K({}),A=K(""),r=K(null);function L(o){try{const n=T(o);return!n||n.trim()===""?{parsed:!1,css:"",error:"No CSS generated"}:{parsed:!0,css:n}}catch(n){return{parsed:!1,css:"",error:n.message||"Parse error"}}}he(async()=>{console.log("generateCSSFromAdorableCSS:",typeof T);try{console.log("Test 1 - relative:",T("relative")),console.log("Test 2 - w(full):",T("w(full)")),console.log("Test 3 - p(10):",T("p(10)"))}catch(o){console.error("Test error:",o)}Object.keys(M).forEach(o=>{we(h,e(h)[o]=M[o].map(n=>({...n,result:L(n.input)})))}),D(h,{...e(h)})});function se(){e(A)?D(r,L(e(A))):D(r,null)}fe();var E=je();Re(o=>{Se.title="Parser Syntax Test - AdorableCSS"});var U=s(E),F=v(s(U),2);X(F,5,()=>a(()=>Object.entries(M)),Y,(o,n)=>{var b=Pe(()=>Ae(e(n),2));let S=()=>e(b)[0],I=()=>e(b)[1];var w=Be(),k=s(w),m=s(k,!0);t(k);var u=v(k,2),y=s(u),Z=v(s(y));X(Z,5,I,Y,(ae,N,oe)=>{var O=ze();const l=Ce(()=>(e(h),S(),a(()=>{var i,p;return(p=(i=e(h)[S()])==null?void 0:i[oe])==null?void 0:p.result})));var V=s(O),ne=s(V);{var pe=i=>{var p=Ee(),G=s(p,!0);t(p),x(()=>{j(p,1,`${C(e(l)),a(()=>e(l).parsed?"c(green-600)":"c(red-600)")??""} bold text(lg)`),g(G,(C(e(l)),a(()=>e(l).parsed?"✓":"✗")))}),d(i,p)},le=i=>{var p=Fe();d(i,p)};P(ne,i=>{e(l)?i(pe):i(le,!1)})}t(V);var z=v(V),J=s(z),de=s(J,!0);t(J),t(z);var B=v(z),ce=s(B,!0);t(B);var Q=v(B),ue=s(Q);{var ve=i=>{var p=be(),G=Te(p);{var me=_=>{var f=Ie(),H=s(f,!0);t(f),x(()=>g(H,(C(e(l)),a(()=>e(l).css)))),d(_,f)},xe=_=>{var f=Oe(),H=s(f,!0);t(f),x(()=>g(H,(C(e(l)),a(()=>e(l).error)))),d(_,f)};P(G,_=>{C(e(l)),a(()=>e(l).parsed)?_(me):_(xe,!1)})}d(i,p)},ge=i=>{var p=Ve();d(i,p)};P(ue,i=>{e(l)?i(ve):i(ge,!1)})}t(Q),t(O),x(()=>{g(de,(e(N),a(()=>e(N).input))),g(ce,(e(N),a(()=>e(N).description)))}),d(ae,O)}),t(Z),t(y),t(u),t(w),x(()=>g(m,S())),d(o,w)}),t(F);var $=v(F,2),q=v(s($),2),R=s(q);De(R);var W=v(R,2),re=s(W);{var ie=o=>{var n=Ke(),b=s(n),S=s(b,!0);t(b);var I=v(b,2);{var w=m=>{var u=Ge(),y=s(u,!0);t(u),x(()=>g(y,(e(r),a(()=>e(r).css)))),d(m,u)},k=m=>{var u=He(),y=s(u,!0);t(u),x(()=>g(y,(e(r),a(()=>e(r).error)))),d(m,u)};P(I,m=>{e(r),a(()=>e(r).parsed)?m(w):m(k,!1)})}t(n),x(()=>{j(n,1,`p(md) radius(md) border(1/${e(r),a(()=>e(r).parsed?"green-200":"red-200")??""}) bg(${e(r),a(()=>e(r).parsed?"green-50":"red-50")??""})`),j(b,1,`label c(${e(r),a(()=>e(r).parsed?"green-700":"red-700")??""}) mb(sm)`),g(S,(e(r),a(()=>e(r).parsed?"Parsed Successfully":"Parse Failed")))}),d(o,n)};P(re,o=>{e(r)&&o(ie)})}t(W),t(q),t($),ke(2),t(U),t(E),Me(R,()=>e(A),o=>D(A,o)),Ne("input",R,se),d(ee,E),_e()}export{st as component};
