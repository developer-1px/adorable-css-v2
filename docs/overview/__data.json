{"type":"data","nodes":[null,null,null,{"type":"data","data":[{"title":1,"description":2,"code":3,"frontmatter":4,"css":5},"Overview","AdorableCSS의 핵심 철학과 기본 개념","\u003Ch1>AdorableCSS 개요\u003C/h1>\n\u003Cblockquote class=\"border-l(4/neutral-300) pl(lg) my(xl) italic c(neutral-700)\">\u003Cp>“CSS was designed for documents. Figma was designed for interfaces. AdorableCSS bridges this 20-year gap.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>AdorableCSS는 Figma의 디자인 시스템과 완벽하게 매핁되는 차세대 CSS 프레임워크입니다. 디자이너가 생각하는 방식 그대로 코드를 작성할 수 있습니다.\u003C/p>\n\u003Ch2>문제: 디자인과 코드의 간극\u003C/h2>\n\u003Cp>매일 수천 명의 개발자가 Figma 디자인을 CSS로 변환하느라 고생합니다:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">\u003Cspan class=\"hljs-comment\">/* 전통적인 CSS - 디자이너의 의도가 사라짐 */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">display\u003C/span>: flex;\n\u003Cspan class=\"hljs-attribute\">flex-direction\u003C/span>: column;\n\u003Cspan class=\"hljs-attribute\">justify-content\u003C/span>: center;\n\u003Cspan class=\"hljs-attribute\">align-items\u003C/span>: center;\n\u003Cspan class=\"hljs-attribute\">gap\u003C/span>: \u003Cspan class=\"hljs-number\">16px\u003C/span>;\n\u003Cspan class=\"hljs-attribute\">width\u003C/span>: \u003Cspan class=\"hljs-number\">100%\u003C/span>;\n\u003C/code>\u003C/pre>\n\u003Cp>디자이너: “16px 간격의 세로 Auto Layout으로 만들어주세요”\u003Cbr>\n개발자: “flex-direction: column… justify-content… 어?”\u003C/p>\n\u003Ch2>해결책: Figma의 언어로 말하는 CSS\u003C/h2>\n\u003Cp>AdorableCSS는 디자이너의 언어를 그대로 사용합니다:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-comment\">&lt;!-- AdorableCSS - 디자인이 곳 코드 --&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;vbox(center) gap(16) w(fill)&quot;\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>같은 결과, 80% 적은 코드\u003C/strong>\u003C/p>\n\u003Ch2>핵심 철학\u003C/h2>\n\u003Ch3>1. Figma-First 접근법\u003C/h3>\n\u003Cp>AdorableCSS는 Figma의 디자인 패널 순서와 개념을 그대로 따릅니다:\u003C/p>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>\u003Cstrong>Auto Layout\u003C/strong> → \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">hbox()\u003C/code>, \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">vbox()\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Fill/Stroke\u003C/strong> → \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">c()\u003C/code>, \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">bg()\u003C/code>, \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">border()\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Effects\u003C/strong> → \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">shadow()\u003C/code>, \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">blur()\u003C/code>, \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">backdrop()\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Layer\u003C/strong> → \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">layer()\u003C/code>, \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">z()\u003C/code>, \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">absolute\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3>2. CSS Native 문법\u003C/h3>\n\u003Cp>CSS 사양을 그대로 따르는 직관적인 문법:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">\u003Cspan class=\"hljs-comment\">/* CSS Native 값 사용 */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">scale\u003C/span>(\u003Cspan class=\"hljs-number\">1.05\u003C/span>)         \u003Cspan class=\"hljs-comment\">/* transform: scale(1.05) */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">rotate\u003C/span>(\u003Cspan class=\"hljs-number\">45deg\u003C/span>)       \u003Cspan class=\"hljs-comment\">/* transform: rotate(45deg) */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">opacity\u003C/span>(\u003Cspan class=\"hljs-number\">0.5\u003C/span>)        \u003Cspan class=\"hljs-comment\">/* opacity: 0.5 */\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">/* 단위 자동 변환 */\u003C/span>\nw(\u003Cspan class=\"hljs-number\">320\u003C/span>)              \u003Cspan class=\"hljs-comment\">/* width: 320px */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">gap\u003C/span>(\u003Cspan class=\"hljs-number\">2rem\u003C/span>)           \u003Cspan class=\"hljs-comment\">/* gap: 2rem */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">font\u003C/span>(\u003Cspan class=\"hljs-number\">16\u003C/span>/\u003Cspan class=\"hljs-number\">1.5\u003C/span>)        \u003Cspan class=\"hljs-comment\">/* font-size: 16px; line-height: 1.5 */\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>3. 의미론적 디자인 시스템\u003C/h3>\n\u003Cp>내장된 디자인 토큰과 컴포넌트로 일관된 UI 구축:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">\u003Cspan class=\"hljs-comment\">/* 디자인 토큰 */\u003C/span>\n\u003Cspan class=\"hljs-selector-tag\">p\u003C/span>(md)               \u003Cspan class=\"hljs-comment\">/* padding: var(--spacing-md) */\u003C/span>\n\u003Cspan class=\"hljs-selector-tag\">text\u003C/span>(xl)            \u003Cspan class=\"hljs-comment\">/* font-size: var(--font-xl) */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">r\u003C/span>(lg)               \u003Cspan class=\"hljs-comment\">/* border-radius: var(--radius-lg) */\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">/* 의미론적 컴포넌트 */\u003C/span>\ncard()              \u003Cspan class=\"hljs-comment\">/* 카드 컴포넌트 스타일 */\u003C/span>\nbtn(primary/lg)     \u003Cspan class=\"hljs-comment\">/* 프라이머리 대형 버튼 */\u003C/span>\nheading(\u003Cspan class=\"hljs-selector-tag\">h1\u003C/span>)         \u003Cspan class=\"hljs-comment\">/* h1 제목 스타일 */\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>왜 AdorableCSS인가?\u003C/h2>\n\u003Ch3>개발자에게\u003C/h3>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>\u003Cstrong>80% 적은 코드\u003C/strong>: 같은 결과를 5분의 1 코드로\u003C/li>\n\u003Cli>\u003Cstrong>Zero Mental Translation\u003C/strong>: 디자인 스펙을 보고 바로 코드 작성\u003C/li>\n\u003Cli>\u003Cstrong>5분 학습\u003C/strong>: Figma를 알면 바로 사용 가능\u003C/li>\n\u003C/ul>\n\u003Ch3>디자이너에게\u003C/h3>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>드디어 개발자가 당신의 비전을 정확히 구현합니다\u003C/li>\n\u003Cli>“프로덕션에서는 다르게 보여요” 문제 해결\u003C/li>\n\u003Cli>공통의 언어로 커뮤니케이션 개선\u003C/li>\n\u003C/ul>\n\u003Ch3>팀에게\u003C/h3>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>\u003Cstrong>50% 빠른 개발\u003C/strong>: 디자인-개발 사이클 단축\u003C/li>\n\u003Cli>\u003Cstrong>디자인 시스템 동기화\u003C/strong>: 한 번 정의, 모든 곳에 적용\u003C/li>\n\u003Cli>\u003Cstrong>협업 효율 극대화\u003C/strong>: 같은 언어로 소통\u003C/li>\n\u003C/ul>\n\u003Ch2>주요 특징\u003C/h2>\n\u003Ch3>1. 통합 문법 시스템\u003C/h3>\n\u003Cp>하나의 함수로 여러 속성을 제어:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">\u003Cspan class=\"hljs-comment\">/* font() - 타이포그래피 통합 */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">font\u003C/span>(xl/\u003Cspan class=\"hljs-number\">1.5\u003C/span>/-\u003Cspan class=\"hljs-number\">2%\u003C/span>)    \u003Cspan class=\"hljs-comment\">/* font-size + line-height + letter-spacing */\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">/* layer() - 포지셔닝 통합 */\u003C/span>\nlayer(center)       \u003Cspan class=\"hljs-comment\">/* 중앙 정렬 */\u003C/span>\nlayer(\u003Cspan class=\"hljs-attribute\">top\u003C/span>:\u003Cspan class=\"hljs-number\">20\u003C/span>+left:\u003Cspan class=\"hljs-number\">30\u003C/span>)  \u003Cspan class=\"hljs-comment\">/* 상단 20px, 왼쪽 30px */\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">/* bg() - 배경 통합 */\u003C/span>\n\u003Cspan class=\"hljs-built_in\">bg\u003C/span>(white)           \u003Cspan class=\"hljs-comment\">/* 단색 배경 */\u003C/span>\n\u003Cspan class=\"hljs-built_in\">bg\u003C/span>(to-tr/purple-\u003Cspan class=\"hljs-number\">500\u003C/span>..pink-\u003Cspan class=\"hljs-number\">500\u003C/span>)  \u003Cspan class=\"hljs-comment\">/* 그라디언트 */\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>2. 직관적인 투명도 표현\u003C/h3>\n\u003Cp>점(.) 표기법으로 간단한 투명도 적용:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">c(black.\u003Cspan class=\"hljs-number\">5\u003C/span>)          \u003Cspan class=\"hljs-comment\">/* color: rgba(0,0,0,0.5) */\u003C/span>\nbg(white.\u003Cspan class=\"hljs-number\">2\u003C/span>)         \u003Cspan class=\"hljs-comment\">/* background: rgba(255,255,255,0.2) */\u003C/span>\n\u003Cspan class=\"hljs-attribute\">border\u003C/span>(gray-\u003Cspan class=\"hljs-number\">200.8\u003C/span>)  \u003Cspan class=\"hljs-comment\">/* border-color: rgba(gray-200, 0.8) */\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>3. 반응형 디자인\u003C/h3>\n\u003Cp>간단한 prefix로 반응형 스타일 적용:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">w(full) md:\u003Cspan class=\"hljs-built_in\">w\u003C/span>(\u003Cspan class=\"hljs-number\">768\u003C/span>) lg:\u003Cspan class=\"hljs-built_in\">w\u003C/span>(\u003Cspan class=\"hljs-number\">1024\u003C/span>)      \u003Cspan class=\"hljs-comment\">/* 반응형 너비 */\u003C/span>\n\u003Cspan class=\"hljs-built_in\">grid\u003C/span>(\u003Cspan class=\"hljs-number\">1\u003C/span>) md:\u003Cspan class=\"hljs-built_in\">grid\u003C/span>(\u003Cspan class=\"hljs-number\">2\u003C/span>) lg:\u003Cspan class=\"hljs-built_in\">grid\u003C/span>(\u003Cspan class=\"hljs-number\">3\u003C/span>)      \u003Cspan class=\"hljs-comment\">/* 반응형 그리드 */\u003C/span>\n\u003Cspan class=\"hljs-built_in\">p\u003C/span>(sm) md:\u003Cspan class=\"hljs-built_in\">p\u003C/span>(md) lg:\u003Cspan class=\"hljs-built_in\">p\u003C/span>(lg)            \u003Cspan class=\"hljs-comment\">/* 반응형 패딩 */\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>4. 상태 관리\u003C/h3>\n\u003Cp>직관적인 상태 prefix:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">hover:\u003Cspan class=\"hljs-built_in\">scale\u003C/span>(\u003Cspan class=\"hljs-number\">1.05\u003C/span>)   \u003Cspan class=\"hljs-comment\">/* hover 시 확대 */\u003C/span>\nfocus:\u003Cspan class=\"hljs-built_in\">ring\u003C/span>(\u003Cspan class=\"hljs-number\">2\u003C/span>)       \u003Cspan class=\"hljs-comment\">/* focus 시 링 */\u003C/span>\nactive:\u003Cspan class=\"hljs-built_in\">opacity\u003C/span>(\u003Cspan class=\"hljs-number\">0.8\u003C/span>) \u003Cspan class=\"hljs-comment\">/* active 시 투명도 */\u003C/span>\ngroup-hover:visible \u003Cspan class=\"hljs-comment\">/* 그룹 hover 효과 */\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>아키텍처 개요\u003C/h2>\n\u003Ch3>1. Parser 시스템\u003C/h3>\n\u003Cp>고성능 토크나이저와 AST 기반 파서로 복잡한 표현식 처리:\u003C/p>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>함수 호출: \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">bg(primary)\u003C/code>\u003C/li>\n\u003Cli>연산자: \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">layer(100%-20,top+10)\u003C/code>\u003C/li>\n\u003Cli>범위: \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">w(100..500)\u003C/code>\u003C/li>\n\u003Cli>조합: \u003Ccode class=\"bg(neutral-50) c(primary-700) px(xs) py(0.5) r(sm) border(1/neutral-200) font(mono) text(sm)\">hover:bg(blue-500.8)\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3>2. Rule 시스템\u003C/h3>\n\u003Cp>우선순위 기반 규칙 등록으로 CSS 캐스케이드 제어:\u003C/p>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>\u003Cstrong>Component (100)\u003C/strong>: 재사용 가능한 컴포넌트\u003C/li>\n\u003Cli>\u003Cstrong>Layout (200)\u003C/strong>: 레이아웃 시스템\u003C/li>\n\u003Cli>\u003Cstrong>Utility (300)\u003C/strong>: 유틸리티 클래스\u003C/li>\n\u003Cli>\u003Cstrong>State (400)\u003C/strong>: 상태 변경자\u003C/li>\n\u003Cli>\u003Cstrong>Responsive (500)\u003C/strong>: 반응형 변경자\u003C/li>\n\u003C/ul>\n\u003Ch3>3. 확장 시스템\u003C/h3>\n\u003Cp>플러그인 아키텍처로 쉬운 확장:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 커스텀 규칙 추가\u003C/span>\n\u003Cspan class=\"hljs-title function_\">registerRule\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;my-effect&#x27;\u003C/span>, \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">value\u003C/span>) =&gt;\u003C/span> ({\n  \u003Cspan class=\"hljs-comment\">/* CSS 속성 */\u003C/span>\n}));\n\n\u003Cspan class=\"hljs-comment\">// 커스텀 키프레임\u003C/span>\n\u003Cspan class=\"hljs-title function_\">registerKeyframes\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;my-animation&#x27;\u003C/span>, {\n  \u003Cspan class=\"hljs-comment\">/* 키프레임 정의 */\u003C/span>\n});\n\u003C/code>\u003C/pre>\n\u003Ch2>철학: Gap-based Layout\u003C/h2>\n\u003Ch3>No Margin Rule\u003C/h3>\n\u003Cp>AdorableCSS는 margin을 사용하지 않습니다. 왜일까요?\u003C/p>\n\u003Col class=\"list(decimal) pl(xl) my(lg)\">\u003Cli>\u003Cstrong>Figma에는 margin이 없다\u003C/strong>: Figma는 gap과 padding만으로 모든 레이아웃을 구성합니다\u003C/li>\n\u003Cli>\u003Cstrong>Margin은 예측 불가능\u003C/strong>: margin collapse, 음수 margin 등 복잡한 규칙\u003C/li>\n\u003Cli>\u003Cstrong>Gap은 명확하고 일관됨\u003C/strong>: 항상 예상한 대로 동작\u003C/li>\n\u003C/ol>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-comment\">&lt;!-- ❌ Wrong: margin으로 간격 조절 --&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;mb(20)&quot;\u003C/span>&gt;\u003C/span>...\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;mt(40)&quot;\u003C/span>&gt;\u003C/span>...\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">&lt;!-- ✅ Correct: gap으로 간격 조절 --&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;vbox gap(20)&quot;\u003C/span>&gt;\u003C/span>\n  \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>...\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n  \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>...\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>성능과 원칙\u003C/h2>\n\u003Ch3>Zero Runtime\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-text\">Traditional CSS-in-JS        AdorableCSS\n────────────────────────────────────────\nRuntime: 50-200KB           Runtime: 0KB\nParse CSS at runtime        Compile-time only\nStyle injection overhead    Pure CSS output\nBundle bloat               Tree-shakable\n\u003C/code>\u003C/pre>\n\u003Ch3>실제 성능 지표\u003C/h3>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>\u003Cstrong>12KB\u003C/strong> 평균 프로덕션 번들\u003C/li>\n\u003Cli>\u003Cstrong>0ms\u003C/strong> 런타임 오버헤드\u003C/li>\n\u003Cli>\u003Cstrong>100%\u003C/strong> tree-shakable\u003C/li>\n\u003Cli>\u003Cstrong>&lt; 50ms\u003C/strong> 빌드 시간 영향\u003C/li>\n\u003C/ul>\n\u003Ch2>시작하기\u003C/h2>\n\u003Ch3>설치\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-bash\">npm install adorable-css\n\u003C/code>\u003C/pre>\n\u003Ch3>기본 사용\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { generateCSS } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 클래스에서 CSS 생성\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\n  \u003Cspan class=\"hljs-string\">&#x27;hbox(middle)&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-string\">&#x27;p(lg)&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-string\">&#x27;bg(white)&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-string\">&#x27;shadow(md)&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-string\">&#x27;hover:shadow(lg)&#x27;\u003C/span>\n]);\n\u003C/code>\u003C/pre>\n\u003Ch3>HTML에서 사용\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;card() p(lg) hover:shadow(lg)&quot;\u003C/span>&gt;\u003C/span>\n  \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h2\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;heading(h2) mb(md)&quot;\u003C/span>&gt;\u003C/span>제목\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h2\u003C/span>&gt;\u003C/span>\n  \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">p\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;text(gray-600) line-height(1.6)&quot;\u003C/span>&gt;\u003C/span>\n    내용...\n  \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">p\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>다음 단계\u003C/h2>\n\u003Cul class=\"list(disc) pl(xl) my(lg)\">\u003Cli>\u003Ca href=\"/docs/figma-first-css-utility\"  class=\"c(primary) underline decoration(primary-200) hover:decoration(primary) transition(all/150ms)\">Figma-First CSS Utility\u003C/a> - Figma 개념과 CSS 매핑\u003C/li>\n\u003Cli>\u003Ca href=\"/docs/design-token\"  class=\"c(primary) underline decoration(primary-200) hover:decoration(primary) transition(all/150ms)\">Design Token\u003C/a> - 디자인 토큰 시스템\u003C/li>\n\u003Cli>\u003Ca href=\"/docs/layout\"  class=\"c(primary) underline decoration(primary-200) hover:decoration(primary) transition(all/150ms)\">Layout\u003C/a> - 레이아웃 시스템\u003C/li>\n\u003Cli>\u003Ca href=\"/docs/component\"  class=\"c(primary) underline decoration(primary-200) hover:decoration(primary) transition(all/150ms)\">Component\u003C/a> - 컴포넌트 시스템\u003C/li>\n\u003Cli>\u003Ca href=\"/docs/design-system\"  class=\"c(primary) underline decoration(primary-200) hover:decoration(primary) transition(all/150ms)\">Design System\u003C/a> - 디자인 시스템 구축\u003C/li>\n\u003C/ul>\n",{},"\n      /* Highlight.js Light Theme inspired by GitHub */\n      .hljs { background: rgb(249 250 251); color: #24292e; }\n      .hljs-comment, .hljs-quote { color: #6a737d; }\n      .hljs-keyword, .hljs-selector-tag, .hljs-literal { color: #d73a49; }\n      .hljs-string { color: #032f62; }\n      .hljs-number { color: #005cc5; }\n      .hljs-variable, .hljs-template-variable, .hljs-attr { color: #e36209; }\n      .hljs-name, .hljs-selector-class, .hljs-selector-id { color: #22863a; }\n      .hljs-title, .hljs-function { color: #6f42c1; }\n      .hljs-built_in { color: #005cc5; }\n      .hljs-params { color: #24292e; }\n      .hljs-meta { color: #005cc5; }\n      .hljs-emphasis { font-style: italic; }\n      .hljs-strong { font-weight: bold; }\n      .hljs-deletion { color: #b31d28; background-color: #ffeef0; }\n      .hljs-addition { color: #22863a; background-color: #f0fff4; }\n      \n      /* Code blocks */\n      pre { \n        background-color: rgb(249 250 251);\n        border: 1px solid rgb(229 231 235);\n      }\n      \n      /* Copy button */\n      .copy-btn {\n        background-color: rgb(243 244 246);\n        border: 1px solid rgb(209 213 219);\n        color: rgb(55 65 81);\n      }\n      .copy-btn:hover {\n        background-color: rgb(229 231 235);\n      }\n    "],"uses":{"params":["slug"]}}]}
