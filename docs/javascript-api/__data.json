{"type":"data","nodes":[null,null,null,{"type":"data","data":[{"title":1,"description":2,"code":3,"frontmatter":4,"css":5},"JavaScript API","프로그래매틱 사용법","\u003Ch1>JavaScript API\u003C/h1>\n\u003Cp>AdorableCSS를 프로그래매틱하게 사용하기 위한 JavaScript API 가이드입니다.\u003C/p>\n\u003Ch2>기본 사용법\u003C/h2>\n\u003Ch3>CSS 생성\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { generateCSS } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 클래스 배열에서 CSS 생성\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;hbox&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;gap(16)&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;p(24)&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;bg(white)&#x27;\u003C/span>]);\n\u003Cspan class=\"hljs-variable language_\">console\u003C/span>.\u003Cspan class=\"hljs-title function_\">log\u003C/span>(css);\n\u003Cspan class=\"hljs-comment\">// 출력: .hbox{display:flex;flex-direction:row;align-items:center} ...\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 단일 클래스\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> singleCSS = \u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;hover:scale(1.05)&#x27;\u003C/span>]);\n\u003C/code>\u003C/pre>\n\u003Ch3>파싱\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { parseAdorableCSS } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// AdorableCSS 문법 파싱\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> ast = \u003Cspan class=\"hljs-title function_\">parseAdorableCSS\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;hover:md:scale(1.1)&#x27;\u003C/span>);\n\u003Cspan class=\"hljs-variable language_\">console\u003C/span>.\u003Cspan class=\"hljs-title function_\">log\u003C/span>(ast);\n\u003Cspan class=\"hljs-comment\">// {\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   type: &#x27;utility&#x27;,\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   prefixes: [&#x27;hover&#x27;, &#x27;md&#x27;],\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   property: &#x27;scale&#x27;,\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   args: [{ type: &#x27;value&#x27;, value: &#x27;1.1&#x27; }],\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   important: false\u003C/span>\n\u003Cspan class=\"hljs-comment\">// }\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>규칙 조회\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { getRuleHandler } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 특정 규칙 핸들러 가져오기\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> scaleHandler = \u003Cspan class=\"hljs-title function_\">getRuleHandler\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;scale&#x27;\u003C/span>);\n\u003Cspan class=\"hljs-keyword\">if\u003C/span> (scaleHandler) {\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title function_\">scaleHandler\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;1.05&#x27;\u003C/span>);\n  \u003Cspan class=\"hljs-variable language_\">console\u003C/span>.\u003Cspan class=\"hljs-title function_\">log\u003C/span>(css); \u003Cspan class=\"hljs-comment\">// { transform: &#x27;scale(1.05)&#x27; }\u003C/span>\n}\n\u003C/code>\u003C/pre>\n\u003Ch2>브라우저 환경\u003C/h2>\n\u003Ch3>자동 스타일 주입\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { injectGlobal } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// DOM에 자동으로 스타일 주입 (개발용)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">if\u003C/span> (\u003Cspan class=\"hljs-keyword\">typeof\u003C/span> \u003Cspan class=\"hljs-variable language_\">window\u003C/span> !== \u003Cspan class=\"hljs-string\">&#x27;undefined&#x27;\u003C/span>) {\n  \u003Cspan class=\"hljs-title function_\">injectGlobal\u003C/span>();\n}\n\n\u003Cspan class=\"hljs-comment\">// 이제 HTML에서 직접 사용 가능\u003C/span>\n\u003Cspan class=\"hljs-comment\">// &lt;div class=&quot;hbox gap(lg) p(xl)&quot;&gt;...&lt;/div&gt;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>CDN 사용\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span> \u003Cspan class=\"hljs-attr\">src\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;https://unpkg.com/adorable-css/dist/adorable.min.js&quot;\u003C/span>&gt;\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\u003Cspan class=\"language-javascript\">\n  \u003Cspan class=\"hljs-comment\">// 전역 AdorableCSS 객체 사용\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title class_\">AdorableCSS\u003C/span>.\u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;card()&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;p(lg)&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;shadow(md)&#x27;\u003C/span>]);\n  \n  \u003Cspan class=\"hljs-comment\">// 자동 주입\u003C/span>\n  \u003Cspan class=\"hljs-title class_\">AdorableCSS\u003C/span>.\u003Cspan class=\"hljs-title function_\">injectGlobal\u003C/span>();\n\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>디자인 토큰\u003C/h2>\n\u003Ch3>토큰 접근\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { defaultTokens } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 토큰 값 사용\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> spacing = defaultTokens.\u003Cspan class=\"hljs-property\">spacing\u003C/span>.\u003Cspan class=\"hljs-property\">md\u003C/span>;  \u003Cspan class=\"hljs-comment\">// &quot;1rem&quot;\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> fontSize = defaultTokens.\u003Cspan class=\"hljs-property\">font\u003C/span>.\u003Cspan class=\"hljs-property\">lg\u003C/span>;     \u003Cspan class=\"hljs-comment\">// &quot;1.125rem&quot;\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> color = defaultTokens.\u003Cspan class=\"hljs-property\">colors\u003C/span>.\u003Cspan class=\"hljs-property\">blue\u003C/span>[\u003Cspan class=\"hljs-number\">500\u003C/span>]; \u003Cspan class=\"hljs-comment\">// &quot;oklch(...)&quot;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>토큰 설정\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { setTokenContext, generateTokenCSS } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 커스텀 토큰 설정\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> customTokens = {\n  ...defaultTokens,\n  \u003Cspan class=\"hljs-attr\">spacing\u003C/span>: {\n    ...defaultTokens.\u003Cspan class=\"hljs-property\">spacing\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">xxl\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;4rem&#x27;\u003C/span>  \u003Cspan class=\"hljs-comment\">// 추가 간격\u003C/span>\n  },\n  \u003Cspan class=\"hljs-attr\">colors\u003C/span>: {\n    ...defaultTokens.\u003Cspan class=\"hljs-property\">colors\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">brand\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;#FF6B6B&#x27;\u003C/span>  \u003Cspan class=\"hljs-comment\">// 브랜드 색상\u003C/span>\n  }\n};\n\n\u003Cspan class=\"hljs-title function_\">setTokenContext\u003C/span>(customTokens);\n\n\u003Cspan class=\"hljs-comment\">// 토큰 CSS 생성\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> tokenCSS = \u003Cspan class=\"hljs-title function_\">generateTokenCSS\u003C/span>();\n\u003C/code>\u003C/pre>\n\u003Ch3>토큰 자동 주입\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { autoInjectTokens, configureAutoInject, isTokensInjected } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 자동 주입 비활성화\u003C/span>\n\u003Cspan class=\"hljs-title function_\">configureAutoInject\u003C/span>({ \u003Cspan class=\"hljs-attr\">enabled\u003C/span>: \u003Cspan class=\"hljs-literal\">false\u003C/span> });\n\n\u003Cspan class=\"hljs-comment\">// 수동 주입\u003C/span>\n\u003Cspan class=\"hljs-keyword\">if\u003C/span> (!\u003Cspan class=\"hljs-title function_\">isTokensInjected\u003C/span>()) {\n  \u003Cspan class=\"hljs-title function_\">autoInjectTokens\u003C/span>();\n}\n\u003C/code>\u003C/pre>\n\u003Ch2>색상 시스템\u003C/h2>\n\u003Ch3>테마 설정\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { setTheme, getCurrentTheme } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 테마 변경\u003C/span>\n\u003Cspan class=\"hljs-title function_\">setTheme\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;vibrant&#x27;\u003C/span>);  \u003Cspan class=\"hljs-comment\">// &#x27;default&#x27;, &#x27;vibrant&#x27;, &#x27;pastel&#x27;, &#x27;dark&#x27;, &#x27;warm&#x27;, &#x27;cool&#x27;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 현재 테마 확인\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> theme = \u003Cspan class=\"hljs-title function_\">getCurrentTheme\u003C/span>();\n\u003Cspan class=\"hljs-variable language_\">console\u003C/span>.\u003Cspan class=\"hljs-title function_\">log\u003C/span>(theme); \u003Cspan class=\"hljs-comment\">// &#x27;vibrant&#x27;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>의미론적 색상\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { configureSemanticColors } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 의미론적 색상 커스터마이징\u003C/span>\n\u003Cspan class=\"hljs-title function_\">configureSemanticColors\u003C/span>({\n  \u003Cspan class=\"hljs-attr\">primary\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;indigo-600&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">secondary\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;pink-500&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">accent\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;purple-600&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">success\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;green-500&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">warning\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;yellow-500&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">error\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;red-600&#x27;\u003C/span>\n});\n\u003C/code>\u003C/pre>\n\u003Ch3>커스텀 테마\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { createCustomTheme } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 커스텀 테마 생성\u003C/span>\n\u003Cspan class=\"hljs-title function_\">createCustomTheme\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;my-theme&#x27;\u003C/span>, {\n  \u003Cspan class=\"hljs-attr\">temperature\u003C/span>: \u003Cspan class=\"hljs-number\">0.8\u003C/span>,    \u003Cspan class=\"hljs-comment\">// 따뜻함 (0-1)\u003C/span>\n  \u003Cspan class=\"hljs-attr\">saturation\u003C/span>: \u003Cspan class=\"hljs-number\">1.2\u003C/span>,     \u003Cspan class=\"hljs-comment\">// 채도 (0.5-1.5)\u003C/span>\n  \u003Cspan class=\"hljs-attr\">lightness\u003C/span>: \u003Cspan class=\"hljs-number\">0.9\u003C/span>       \u003Cspan class=\"hljs-comment\">// 밝기 (0.5-1.5)\u003C/span>\n});\n\n\u003Cspan class=\"hljs-comment\">// 사용\u003C/span>\n\u003Cspan class=\"hljs-title function_\">setTheme\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;my-theme&#x27;\u003C/span>);\n\u003C/code>\u003C/pre>\n\u003Ch2>컴포넌트 시스템\u003C/h2>\n\u003Ch3>컴포넌트 정의\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { defineComponent } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 커스텀 컴포넌트 정의\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> myButton = \u003Cspan class=\"hljs-title function_\">defineComponent\u003C/span>({\n  \u003Cspan class=\"hljs-attr\">base\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;inline-flex items(center) px(16) h(40) r(md) transition&#x27;\u003C/span>,\n  \n  \u003Cspan class=\"hljs-attr\">sizes\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">sm\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;h(32) px(12) text(sm)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">md\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;h(40) px(16) text(md)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">lg\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;h(48) px(20) text(lg)&#x27;\u003C/span>\n  },\n  \n  \u003Cspan class=\"hljs-attr\">variants\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">primary\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;bg(primary) c(white) hover:bg(primary-700)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">secondary\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;bg(gray-100) c(gray-900) hover:bg(gray-200)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">danger\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;bg(red-500) c(white) hover:bg(red-600)&#x27;\u003C/span>\n  },\n  \n  \u003Cspan class=\"hljs-attr\">compounds\u003C/span>: [\n    {\n      \u003Cspan class=\"hljs-attr\">variant\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;primary&#x27;\u003C/span>,\n      \u003Cspan class=\"hljs-attr\">size\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;lg&#x27;\u003C/span>,\n      \u003Cspan class=\"hljs-attr\">class\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;font-weight(bold)&#x27;\u003C/span>\n    }\n  ],\n  \n  \u003Cspan class=\"hljs-attr\">defaults\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">size\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;md&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">variant\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;primary&#x27;\u003C/span>\n  }\n});\n\n\u003Cspan class=\"hljs-comment\">// 컴포넌트 등록\u003C/span>\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { registerComponent } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\u003Cspan class=\"hljs-title function_\">registerComponent\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;my-btn&#x27;\u003C/span>, myButton);\n\u003C/code>\u003C/pre>\n\u003Ch3>테마 지원 컴포넌트\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { defineThemedComponent } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> themedCard = \u003Cspan class=\"hljs-title function_\">defineThemedComponent\u003C/span>({\n  \u003Cspan class=\"hljs-attr\">light\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">base\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;bg(white) c(gray-900) shadow(md)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">variants\u003C/span>: {\n      \u003Cspan class=\"hljs-attr\">elevated\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;shadow(xl)&#x27;\u003C/span>,\n      \u003Cspan class=\"hljs-attr\">flat\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;shadow(none) border(1/gray-200)&#x27;\u003C/span>\n    }\n  },\n  \u003Cspan class=\"hljs-attr\">dark\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">base\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;bg(gray-800) c(white) shadow(xl/black.3)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">variants\u003C/span>: {\n      \u003Cspan class=\"hljs-attr\">elevated\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;shadow(2xl/black.5)&#x27;\u003C/span>,\n      \u003Cspan class=\"hljs-attr\">flat\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;shadow(none) border(1/gray-700)&#x27;\u003C/span>\n    }\n  }\n});\n\u003C/code>\u003C/pre>\n\u003Ch2>확장성\u003C/h2>\n\u003Ch3>커스텀 규칙 추가\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { priorityRegistry, \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span> } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 새로운 유틸리티 추가\u003C/span>\npriorityRegistry.\u003Cspan class=\"hljs-title function_\">register\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;glow&#x27;\u003C/span>, \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">value = \u003Cspan class=\"hljs-string\">&#x27;10&#x27;\u003C/span>\u003C/span>) =&gt;\u003C/span> ({\n  \u003Cspan class=\"hljs-attr\">boxShadow\u003C/span>: \u003Cspan class=\"hljs-string\">`0 0 \u003Cspan class=\"hljs-subst\">${value}\u003C/span>px currentColor`\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">filter\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;brightness(1.1)&#x27;\u003C/span>\n}), \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span>.\u003Cspan class=\"hljs-property\">UTILITY\u003C/span>);\n\n\u003Cspan class=\"hljs-comment\">// 사용\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;glow(20)&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;c(blue-500)&#x27;\u003C/span>]);\n\u003C/code>\u003C/pre>\n\u003Ch3>커스텀 키프레임\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { registerKeyframes } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 키프레임 추가\u003C/span>\n\u003Cspan class=\"hljs-title function_\">registerKeyframes\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;slide-in&#x27;\u003C/span>, {\n  \u003Cspan class=\"hljs-attr\">from\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">transform\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;translateX(-100%)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">opacity\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;0&#x27;\u003C/span>\n  },\n  \u003Cspan class=\"hljs-attr\">to\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">transform\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;translateX(0)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">opacity\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;1&#x27;\u003C/span>\n  }\n});\n\n\u003Cspan class=\"hljs-comment\">// 사용\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;animate(slide-in/500/ease-out)&#x27;\u003C/span>]);\n\u003C/code>\u003C/pre>\n\u003Ch3>플러그인 시스템\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { createPlugin } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> myPlugin = \u003Cspan class=\"hljs-title function_\">createPlugin\u003C/span>({\n  \u003Cspan class=\"hljs-attr\">name\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;my-plugin&#x27;\u003C/span>,\n  \n  \u003Cspan class=\"hljs-attr\">rules\u003C/span>: {\n    \u003Cspan class=\"hljs-string\">&#x27;my-utility&#x27;\u003C/span>: \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">value\u003C/span>) =&gt;\u003C/span> ({\n      \u003Cspan class=\"hljs-comment\">// CSS 속성\u003C/span>\n    })\n  },\n  \n  \u003Cspan class=\"hljs-attr\">keyframes\u003C/span>: {\n    \u003Cspan class=\"hljs-string\">&#x27;my-animation&#x27;\u003C/span>: {\n      \u003Cspan class=\"hljs-comment\">// 키프레임 정의\u003C/span>\n    }\n  },\n  \n  \u003Cspan class=\"hljs-attr\">tokens\u003C/span>: {\n    \u003Cspan class=\"hljs-comment\">// 추가 토큰\u003C/span>\n  }\n});\n\n\u003Cspan class=\"hljs-comment\">// 플러그인 등록\u003C/span>\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { registerPlugin } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\u003Cspan class=\"hljs-title function_\">registerPlugin\u003C/span>(myPlugin);\n\u003C/code>\u003C/pre>\n\u003Ch2>성능 최적화\u003C/h2>\n\u003Ch3>캐싱\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { createMemo } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 메모이제이션된 함수 생성\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> memoizedGenerate = \u003Cspan class=\"hljs-title function_\">createMemo\u003C/span>(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">classes\u003C/span>) =&gt;\u003C/span> {\n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>(classes);\n});\n\n\u003Cspan class=\"hljs-comment\">// 동일한 입력에 대해 캐시된 결과 반환\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> css1 = \u003Cspan class=\"hljs-title function_\">memoizedGenerate\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;hbox&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;gap(lg)&#x27;\u003C/span>]);\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> css2 = \u003Cspan class=\"hljs-title function_\">memoizedGenerate\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;hbox&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;gap(lg)&#x27;\u003C/span>]); \u003Cspan class=\"hljs-comment\">// 캐시에서 반환\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>선택적 Import\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-comment\">// 필요한 것만 import\u003C/span>\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { generateCSS } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css/core&#x27;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { btn, card } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css/components&#x27;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { hbox, vbox } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css/layout&#x27;\u003C/span>;\n\u003C/code>\u003C/pre>\n\u003Ch2>타입스크립트\u003C/h2>\n\u003Ch3>타입 정의\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> \u003Cspan class=\"hljs-keyword\">type\u003C/span> { \n  \u003Cspan class=\"hljs-title class_\">CSSRule\u003C/span>, \n  \u003Cspan class=\"hljs-title class_\">DesignTokens\u003C/span>, \n  \u003Cspan class=\"hljs-title class_\">RuleHandler\u003C/span>,\n  \u003Cspan class=\"hljs-title class_\">ComponentDefinition\u003C/span> \n} \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 타입 안전한 규칙 정의\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> \u003Cspan class=\"hljs-attr\">myRule\u003C/span>: \u003Cspan class=\"hljs-title class_\">RuleHandler\u003C/span> = (\u003Cspan class=\"hljs-attr\">value\u003C/span>?: \u003Cspan class=\"hljs-built_in\">string\u003C/span>): \u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-params\">CSSRule\u003C/span> =&gt;\u003C/span> {\n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> {\n    \u003Cspan class=\"hljs-attr\">display\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;flex&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">gap\u003C/span>: value || \u003Cspan class=\"hljs-string\">&#x27;1rem&#x27;\u003C/span>\n  };\n};\n\n\u003Cspan class=\"hljs-comment\">// 타입 안전한 토큰\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> \u003Cspan class=\"hljs-attr\">tokens\u003C/span>: \u003Cspan class=\"hljs-title class_\">DesignTokens\u003C/span> = {\n  \u003Cspan class=\"hljs-attr\">spacing\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">sm\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;0.5rem&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">md\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;1rem&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">lg\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;1.5rem&#x27;\u003C/span>\n  }\n};\n\u003C/code>\u003C/pre>\n\u003Ch2>디버깅\u003C/h2>\n\u003Ch3>디버그 모드\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> { enableDebugMode } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 디버그 모드 활성화\u003C/span>\n\u003Cspan class=\"hljs-title function_\">enableDebugMode\u003C/span>();\n\n\u003Cspan class=\"hljs-comment\">// 이제 파싱 과정과 CSS 생성 과정이 콘솔에 출력됨\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>에러 처리\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-keyword\">try\u003C/span> {\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;invalid(syntax&#x27;\u003C/span>]);\n} \u003Cspan class=\"hljs-keyword\">catch\u003C/span> (error) {\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (error \u003Cspan class=\"hljs-keyword\">instanceof\u003C/span> \u003Cspan class=\"hljs-title class_\">AdorableCSSError\u003C/span>) {\n    \u003Cspan class=\"hljs-variable language_\">console\u003C/span>.\u003Cspan class=\"hljs-title function_\">error\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;Parsing error:&#x27;\u003C/span>, error.\u003Cspan class=\"hljs-property\">message\u003C/span>);\n    \u003Cspan class=\"hljs-variable language_\">console\u003C/span>.\u003Cspan class=\"hljs-title function_\">error\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;At position:&#x27;\u003C/span>, error.\u003Cspan class=\"hljs-property\">position\u003C/span>);\n  }\n}\n\u003C/code>\u003C/pre>\n\u003Ch2>마이그레이션\u003C/h2>\n\u003Ch3>v1에서 v2로\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-javascript\">\u003Cspan class=\"hljs-comment\">// v1\u003C/span>\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> adorable \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\nadorable.\u003Cspan class=\"hljs-title function_\">parse\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;w-100 h-100&#x27;\u003C/span>);\n\n\u003Cspan class=\"hljs-comment\">// v2\u003C/span>\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { generateCSS } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\u003Cspan class=\"hljs-title function_\">generateCSS\u003C/span>([\u003Cspan class=\"hljs-string\">&#x27;w(100)&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;h(100)&#x27;\u003C/span>]);\n\u003C/code>\u003C/pre>\n",{},"\n      /* Highlight.js Light Theme inspired by GitHub */\n      .hljs { background: rgb(249 250 251); color: #24292e; }\n      .hljs-comment, .hljs-quote { color: #6a737d; }\n      .hljs-keyword, .hljs-selector-tag, .hljs-literal { color: #d73a49; }\n      .hljs-string { color: #032f62; }\n      .hljs-number { color: #005cc5; }\n      .hljs-variable, .hljs-template-variable, .hljs-attr { color: #e36209; }\n      .hljs-name, .hljs-selector-class, .hljs-selector-id { color: #22863a; }\n      .hljs-title, .hljs-function { color: #6f42c1; }\n      .hljs-built_in { color: #005cc5; }\n      .hljs-params { color: #24292e; }\n      .hljs-meta { color: #005cc5; }\n      .hljs-emphasis { font-style: italic; }\n      .hljs-strong { font-weight: bold; }\n      .hljs-deletion { color: #b31d28; background-color: #ffeef0; }\n      .hljs-addition { color: #22863a; background-color: #f0fff4; }\n      \n      /* Code blocks */\n      pre { \n        background-color: rgb(249 250 251);\n        border: 1px solid rgb(229 231 235);\n      }\n      \n      /* Copy button */\n      .copy-btn {\n        background-color: rgb(243 244 246);\n        border: 1px solid rgb(209 213 219);\n        color: rgb(55 65 81);\n      }\n      .copy-btn:hover {\n        background-color: rgb(229 231 235);\n      }\n    "],"uses":{"params":["slug"]}}]}
