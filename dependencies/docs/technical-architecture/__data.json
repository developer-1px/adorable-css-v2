{"type":"data","nodes":[null,null,{"type":"data","data":[{"title":1,"description":2,"code":3,"frontmatter":4,"css":5},"기술 아키텍처","파서 시스템, 규칙 엔진, 우선순위 시스템","\u003Ch1>기술 아키텍처\u003C/h1>\n\u003Cp>AdorableCSS의 내부 아키텍처와 파서 시스템, 규칙 엔진에 대한 심층 분석입니다.\u003C/p>\n\u003Ch2>파서 시스템\u003C/h2>\n\u003Ch3>개요\u003C/h3>\n\u003Cp>AdorableCSS의 핵심은 복잡한 CSS 표현식을 이해하는 커스텀 파서입니다. 전통적인 유틸리티 프레임워크가 단순한 클래스명을 사용하는 것과 달리, 우리는 함수형 문법을 지원합니다:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-css\">\u003Cspan class=\"hljs-comment\">/* AdorableCSS가 파싱하는 표현식들 */\u003C/span>\nlayer(\u003Cspan class=\"hljs-attribute\">top\u003C/span>:\u003Cspan class=\"hljs-number\">20\u003C/span>+left:\u003Cspan class=\"hljs-number\">30\u003C/span>)              \u003Cspan class=\"hljs-comment\">/* 복잡한 포지셔닝 */\u003C/span>\n\u003Cspan class=\"hljs-built_in\">font\u003C/span>(Inter/\u003Cspan class=\"hljs-number\">16\u003C/span>/\u003Cspan class=\"hljs-number\">1.5\u003C/span>/medium)          \u003Cspan class=\"hljs-comment\">/* 다중 매개변수 */\u003C/span>\nhover:md:\u003Cspan class=\"hljs-built_in\">scale\u003C/span>(\u003Cspan class=\"hljs-number\">1.1\u003C/span>)                \u003Cspan class=\"hljs-comment\">/* 중첩된 prefix */\u003C/span>\n\u003Cspan class=\"hljs-built_in\">bg\u003C/span>(\u003Cspan class=\"hljs-number\">45deg\u003C/span>/blue-\u003Cspan class=\"hljs-number\">500\u003C/span>..purple-\u003Cspan class=\"hljs-number\">500\u003C/span>)     \u003Cspan class=\"hljs-comment\">/* 그라디언트 문법 */\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>파서 아키텍처\u003C/h3>\n\u003Ch4>1단계: 토큰화 (Tokenization)\u003C/h4>\n\u003Cp>입력 문자열을 의미 있는 토큰으로 분해:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 토큰 타입 정의\u003C/span>\n\u003Cspan class=\"hljs-keyword\">type\u003C/span> \u003Cspan class=\"hljs-title class_\">TokenType\u003C/span> = \n  | \u003Cspan class=\"hljs-string\">&#x27;(dimension-pair)&#x27;\u003C/span>    \u003Cspan class=\"hljs-comment\">// 64x64\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;(hexcolor)&#x27;\u003C/span>         \u003Cspan class=\"hljs-comment\">// #ff0000\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;(color-opacity)&#x27;\u003C/span>    \u003Cspan class=\"hljs-comment\">// white.8, blue-500.5\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;(string)&#x27;\u003C/span>           \u003Cspan class=\"hljs-comment\">// &quot;quoted text&quot;\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;(range)&#x27;\u003C/span>            \u003Cspan class=\"hljs-comment\">// 100..500\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;(gradient)&#x27;\u003C/span>         \u003Cspan class=\"hljs-comment\">// blue..red\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;PREFIX&#x27;\u003C/span>             \u003Cspan class=\"hljs-comment\">// hover:, md:\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;IDENTIFIER&#x27;\u003C/span>         \u003Cspan class=\"hljs-comment\">// scale, bg, etc\u003C/span>\n  | \u003Cspan class=\"hljs-string\">&#x27;OPERATOR&#x27;\u003C/span>           \u003Cspan class=\"hljs-comment\">// +, -, /, ,\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 토크나이저 사용\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> tokenizer = \u003Cspan class=\"hljs-title function_\">createTokenizer\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;hover:scale(1.1)&quot;\u003C/span>);\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> tokens = tokenizer.\u003Cspan class=\"hljs-title function_\">tokenize\u003C/span>();\n\u003Cspan class=\"hljs-comment\">// [\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   { type: &#x27;PREFIX&#x27;, value: &#x27;hover&#x27; },\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   { type: &#x27;IDENTIFIER&#x27;, value: &#x27;scale&#x27; },\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   { type: &#x27;LPAREN&#x27;, value: &#x27;(&#x27; },\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   { type: &#x27;NUMBER&#x27;, value: &#x27;1.1&#x27; },\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   { type: &#x27;RPAREN&#x27;, value: &#x27;)&#x27; }\u003C/span>\n\u003Cspan class=\"hljs-comment\">// ]\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch4>2단계: AST 생성\u003C/h4>\n\u003Cp>토큰을 Abstract Syntax Tree로 변환:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-keyword\">interface\u003C/span> \u003Cspan class=\"hljs-title class_\">AdorableNode\u003C/span> {\n  \u003Cspan class=\"hljs-attr\">type\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;utility&#x27;\u003C/span>;\n  \u003Cspan class=\"hljs-attr\">prefixes\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>[];      \u003Cspan class=\"hljs-comment\">// [&#x27;hover&#x27;, &#x27;md&#x27;]\u003C/span>\n  \u003Cspan class=\"hljs-attr\">property\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>;        \u003Cspan class=\"hljs-comment\">// &#x27;scale&#x27;\u003C/span>\n  \u003Cspan class=\"hljs-attr\">args\u003C/span>: \u003Cspan class=\"hljs-title class_\">ArgumentNode\u003C/span>[];    \u003Cspan class=\"hljs-comment\">// 파싱된 인자들\u003C/span>\n  \u003Cspan class=\"hljs-attr\">important\u003C/span>: \u003Cspan class=\"hljs-built_in\">boolean\u003C/span>;      \u003Cspan class=\"hljs-comment\">// ! 플래그\u003C/span>\n}\n\n\u003Cspan class=\"hljs-comment\">// 파서 사용\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> ast = \u003Cspan class=\"hljs-title function_\">parseAdorableCSS\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;hover:md:scale(1.1)!&quot;\u003C/span>);\n\u003Cspan class=\"hljs-comment\">// {\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   type: &#x27;utility&#x27;,\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   prefixes: [&#x27;hover&#x27;, &#x27;md&#x27;],\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   property: &#x27;scale&#x27;,\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   args: [{ type: &#x27;value&#x27;, value: &#x27;1.1&#x27; }],\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   important: true\u003C/span>\n\u003Cspan class=\"hljs-comment\">// }\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch4>3단계: CSS 생성\u003C/h4>\n\u003Cp>AST를 실제 CSS로 변환:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 규칙 핸들러 조회\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> handler = \u003Cspan class=\"hljs-title function_\">getRuleHandler\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;scale&#x27;\u003C/span>);\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> css = \u003Cspan class=\"hljs-title function_\">handler\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;1.1&#x27;\u003C/span>);\n\u003Cspan class=\"hljs-comment\">// { transform: &#x27;scale(1.1)&#x27; }\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// prefix 적용\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> finalCSS = \u003Cspan class=\"hljs-title function_\">applyPrefixes\u003C/span>(css, [\u003Cspan class=\"hljs-string\">&#x27;hover&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;md&#x27;\u003C/span>]);\n\u003Cspan class=\"hljs-comment\">// @media (min-width: 768px) {\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   .hover\\:md\\:scale\\(1\\.1\\):hover {\u003C/span>\n\u003Cspan class=\"hljs-comment\">//     transform: scale(1.1);\u003C/span>\n\u003Cspan class=\"hljs-comment\">//   }\u003C/span>\n\u003Cspan class=\"hljs-comment\">// }\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>토큰 패턴 매칭\u003C/h3>\n\u003Cp>AdorableCSS는 정교한 패턴 매칭으로 다양한 값 형식을 인식:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 색상 + 투명도\u003C/span>\n/([a-zA-Z]+(?:-[\u003Cspan class=\"hljs-number\">0\u003C/span>-\u003Cspan class=\"hljs-number\">9\u003C/span>]+)*\\.[\u003Cspan class=\"hljs-number\">0\u003C/span>-\u003Cspan class=\"hljs-number\">9\u003C/span>]+)/  \u003Cspan class=\"hljs-comment\">// white.8, blue-500.5\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 치수 쌍\u003C/span>\n\u003Cspan class=\"hljs-regexp\">/(\\d+x\\d+)/\u003C/span>                        \u003Cspan class=\"hljs-comment\">// 320x200\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 그라디언트\u003C/span>\n\u003Cspan class=\"hljs-regexp\">/([^,]+)\\.\\.([^,)]+)/\u003C/span>              \u003Cspan class=\"hljs-comment\">// blue-500..purple-500\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 계산식\u003C/span>\n\u003Cspan class=\"hljs-regexp\">/((?:top|bottom|left|right)(?:[+-]\\d+)?)/\u003C/span>  \u003Cspan class=\"hljs-comment\">// top+20, left-30\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>규칙 시스템\u003C/h2>\n\u003Ch3>우선순위 기반 아키텍처\u003C/h3>\n\u003Cp>CSS 특정성을 자동으로 관리하는 5단계 우선순위 시스템:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-keyword\">enum\u003C/span> \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span> {\n  \u003Cspan class=\"hljs-variable constant_\">RESET\u003C/span> = \u003Cspan class=\"hljs-number\">0\u003C/span>,          \u003Cspan class=\"hljs-comment\">// 리셋 스타일\u003C/span>\n  \u003Cspan class=\"hljs-variable constant_\">COMPONENT\u003C/span> = \u003Cspan class=\"hljs-number\">100\u003C/span>,    \u003Cspan class=\"hljs-comment\">// card, btn, heading\u003C/span>\n  \u003Cspan class=\"hljs-variable constant_\">LAYOUT\u003C/span> = \u003Cspan class=\"hljs-number\">200\u003C/span>,       \u003Cspan class=\"hljs-comment\">// hbox, vbox, grid\u003C/span>\n  \u003Cspan class=\"hljs-variable constant_\">UTILITY\u003C/span> = \u003Cspan class=\"hljs-number\">300\u003C/span>,      \u003Cspan class=\"hljs-comment\">// c, bg, p, m\u003C/span>\n  \u003Cspan class=\"hljs-variable constant_\">STATE\u003C/span> = \u003Cspan class=\"hljs-number\">400\u003C/span>,        \u003Cspan class=\"hljs-comment\">// hover:, focus:, active:\u003C/span>\n  \u003Cspan class=\"hljs-variable constant_\">RESPONSIVE\u003C/span> = \u003Cspan class=\"hljs-number\">500\u003C/span>    \u003Cspan class=\"hljs-comment\">// sm:, md:, lg:, xl:\u003C/span>\n}\n\u003C/code>\u003C/pre>\n\u003Cp>높은 우선순위의 규칙이 자동으로 낮은 우선순위를 덮어씁니다:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-comment\">&lt;!-- component &lt; utility &lt; state --&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;card() bg(blue-500) hover:bg(blue-600)&quot;\u003C/span>&gt;\u003C/span>\n  \u003Cspan class=\"hljs-comment\">&lt;!-- hover 시 blue-600이 적용됨 --&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>규칙 등록 시스템\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 단순 규칙\u003C/span>\nregistry.\u003Cspan class=\"hljs-title function_\">register\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;opacity&#x27;\u003C/span>, \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">value\u003C/span>) =&gt;\u003C/span> ({\n  \u003Cspan class=\"hljs-attr\">opacity\u003C/span>: value\n}), \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span>.\u003Cspan class=\"hljs-property\">UTILITY\u003C/span>);\n\n\u003Cspan class=\"hljs-comment\">// 복잡한 규칙\u003C/span>\nregistry.\u003Cspan class=\"hljs-title function_\">register\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;layer&#x27;\u003C/span>, \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">args\u003C/span>) =&gt;\u003C/span> {\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> positions = \u003Cspan class=\"hljs-title function_\">parseLayerPositions\u003C/span>(args);\n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> {\n    \u003Cspan class=\"hljs-attr\">position\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;absolute&#x27;\u003C/span>,\n    ...positions\n  };\n}, \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span>.\u003Cspan class=\"hljs-property\">LAYOUT\u003C/span>);\n\n\u003Cspan class=\"hljs-comment\">// 하이브리드 규칙 (CSS + 클래스)\u003C/span>\nregistry.\u003Cspan class=\"hljs-title function_\">register\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;container&#x27;\u003C/span>, \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">size\u003C/span>) =&gt;\u003C/span> {\n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> [\n    { \u003Cspan class=\"hljs-attr\">maxWidth\u003C/span>: \u003Cspan class=\"hljs-string\">`var(--container-\u003Cspan class=\"hljs-subst\">${size}\u003C/span>)`\u003C/span> },\n    \u003Cspan class=\"hljs-string\">&#x27;mx-auto px-containerPadding&#x27;\u003C/span>\n  ];\n}, \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span>.\u003Cspan class=\"hljs-property\">COMPONENT\u003C/span>);\n\u003C/code>\u003C/pre>\n\u003Ch2>값 변환 시스템\u003C/h2>\n\u003Ch3>스마트 단위 변환\u003C/h3>\n\u003Cp>AdorableCSS는 값을 자동으로 적절한 CSS 단위로 변환:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">processValue\u003C/span>(\u003Cspan class=\"hljs-params\">\u003Cspan class=\"hljs-attr\">value\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>, \u003Cspan class=\"hljs-attr\">property\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>\u003C/span>): \u003Cspan class=\"hljs-built_in\">string\u003C/span> {\n  \u003Cspan class=\"hljs-comment\">// 숫자만 → px 추가\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (\u003Cspan class=\"hljs-regexp\">/^\\d+$/\u003C/span>.\u003Cspan class=\"hljs-title function_\">test\u003C/span>(value)) {\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> value + \u003Cspan class=\"hljs-string\">&#x27;px&#x27;\u003C/span>;\n  }\n  \n  \u003Cspan class=\"hljs-comment\">// 단위가 있으면 그대로\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (\u003Cspan class=\"hljs-regexp\">/\\d+(px|rem|em|%|vh|vw)$/\u003C/span>.\u003Cspan class=\"hljs-title function_\">test\u003C/span>(value)) {\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> value;\n  }\n  \n  \u003Cspan class=\"hljs-comment\">// 토큰 확인\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (\u003Cspan class=\"hljs-title function_\">isToken\u003C/span>(value)) {\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-string\">`var(--\u003Cspan class=\"hljs-subst\">${property}\u003C/span>-\u003Cspan class=\"hljs-subst\">${value}\u003C/span>)`\u003C/span>;\n  }\n  \n  \u003Cspan class=\"hljs-comment\">// 특수 값\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (value === \u003Cspan class=\"hljs-string\">&#x27;fill&#x27;\u003C/span>) \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;100%&#x27;\u003C/span>;\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (value === \u003Cspan class=\"hljs-string\">&#x27;hug&#x27;\u003C/span>) \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;fit-content&#x27;\u003C/span>;\n  \n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> value;\n}\n\u003C/code>\u003C/pre>\n\u003Ch3>색상 처리\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 색상 + 투명도 파싱\u003C/span>\n\u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">parseColorWithOpacity\u003C/span>(\u003Cspan class=\"hljs-params\">\u003Cspan class=\"hljs-attr\">input\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>\u003C/span>) {\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> match = input.\u003Cspan class=\"hljs-title function_\">match\u003C/span>(\u003Cspan class=\"hljs-regexp\">/(.+)\\.(\\d+)/\u003C/span>);\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (!match) \u003Cspan class=\"hljs-keyword\">return\u003C/span> input;\n  \n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> [, color, opacity] = match;\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> alpha = \u003Cspan class=\"hljs-built_in\">parseInt\u003C/span>(opacity) / \u003Cspan class=\"hljs-number\">10\u003C/span>;\n  \n  \u003Cspan class=\"hljs-comment\">// 토큰 색상\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (\u003Cspan class=\"hljs-title function_\">isColorToken\u003C/span>(color)) {\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-string\">`color-mix(in srgb, var(--\u003Cspan class=\"hljs-subst\">${color}\u003C/span>) \u003Cspan class=\"hljs-subst\">${alpha * \u003Cspan class=\"hljs-number\">100\u003C/span>}\u003C/span>%, transparent)`\u003C/span>;\n  }\n  \n  \u003Cspan class=\"hljs-comment\">// hex 색상\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">if\u003C/span> (color.\u003Cspan class=\"hljs-title function_\">startsWith\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;#&#x27;\u003C/span>)) {\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-title function_\">hexToRgba\u003C/span>(color, alpha);\n  }\n  \n  \u003Cspan class=\"hljs-comment\">// 기본 색상\u003C/span>\n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-string\">`rgba(\u003Cspan class=\"hljs-subst\">${colorToRgb(color)}\u003C/span>, \u003Cspan class=\"hljs-subst\">${alpha}\u003C/span>)`\u003C/span>;\n}\n\u003C/code>\u003C/pre>\n\u003Ch2>메모이제이션\u003C/h2>\n\u003Cp>성능 최적화를 위한 간단한 메모 시스템:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">function\u003C/span> createMemo&lt;T&gt;(\u003Cspan class=\"hljs-attr\">fn\u003C/span>: \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">\u003Cspan class=\"hljs-attr\">input\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>\u003C/span>) =&gt;\u003C/span> T): \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">\u003Cspan class=\"hljs-attr\">input\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>\u003C/span>) =&gt;\u003C/span> T {\n  \u003Cspan class=\"hljs-keyword\">const\u003C/span> cache = \u003Cspan class=\"hljs-keyword\">new\u003C/span> \u003Cspan class=\"hljs-title class_\">Map\u003C/span>&lt;\u003Cspan class=\"hljs-built_in\">string\u003C/span>, T&gt;();\n  \n  \u003Cspan class=\"hljs-keyword\">return\u003C/span> (\u003Cspan class=\"hljs-attr\">input\u003C/span>: \u003Cspan class=\"hljs-built_in\">string\u003C/span>): \u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-params\">T\u003C/span> =&gt;\u003C/span> {\n    \u003Cspan class=\"hljs-keyword\">if\u003C/span> (cache.\u003Cspan class=\"hljs-title function_\">has\u003C/span>(input)) {\n      \u003Cspan class=\"hljs-keyword\">return\u003C/span> cache.\u003Cspan class=\"hljs-title function_\">get\u003C/span>(input)!;\n    }\n    \n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> result = \u003Cspan class=\"hljs-title function_\">fn\u003C/span>(input);\n    cache.\u003Cspan class=\"hljs-title function_\">set\u003C/span>(input, result);\n    \n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> result;\n  };\n}\n\n\u003Cspan class=\"hljs-comment\">// 적용\u003C/span>\n\u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">const\u003C/span> parseAdorableCSS = \u003Cspan class=\"hljs-title function_\">createMemo\u003C/span>(_parseAdorableCSS);\n\u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">const\u003C/span> generateCSS = \u003Cspan class=\"hljs-title function_\">createMemo\u003C/span>(_generateCSS);\n\u003C/code>\u003C/pre>\n\u003Ch2>컴포넌트 시스템 통합\u003C/h2>\n\u003Cp>파서는 컴포넌트 정의와도 원활하게 통합:\u003C/p>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 컴포넌트 정의\u003C/span>\n\u003Cspan class=\"hljs-keyword\">const\u003C/span> button = \u003Cspan class=\"hljs-title function_\">defineComponent\u003C/span>({\n  \u003Cspan class=\"hljs-attr\">base\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;inline-flex items(center) px(16) h(40)&#x27;\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">variants\u003C/span>: {\n    \u003Cspan class=\"hljs-attr\">primary\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;bg(primary) c(white)&#x27;\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">secondary\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;bg(gray-100) c(gray-900)&#x27;\u003C/span>\n  }\n});\n\n\u003Cspan class=\"hljs-comment\">// 파서가 btn(primary/lg)를 만나면:\u003C/span>\n\u003Cspan class=\"hljs-comment\">// 1. btn 컴포넌트 조회\u003C/span>\n\u003Cspan class=\"hljs-comment\">// 2. primary variant + lg size 적용\u003C/span>\n\u003Cspan class=\"hljs-comment\">// 3. 모든 클래스를 파싱하여 CSS 생성\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>확장성\u003C/h2>\n\u003Ch3>커스텀 규칙 추가\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 새로운 유틸리티 추가\u003C/span>\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { registry, \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span> } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;adorable-css&#x27;\u003C/span>;\n\nregistry.\u003Cspan class=\"hljs-title function_\">register\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;glow&#x27;\u003C/span>, \u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">value = \u003Cspan class=\"hljs-string\">&#x27;10&#x27;\u003C/span>\u003C/span>) =&gt;\u003C/span> ({\n  \u003Cspan class=\"hljs-attr\">boxShadow\u003C/span>: \u003Cspan class=\"hljs-string\">`0 0 \u003Cspan class=\"hljs-subst\">${value}\u003C/span>px currentColor`\u003C/span>,\n  \u003Cspan class=\"hljs-attr\">filter\u003C/span>: \u003Cspan class=\"hljs-string\">&#x27;brightness(1.1)&#x27;\u003C/span>\n}), \u003Cspan class=\"hljs-title class_\">RulePriority\u003C/span>.\u003Cspan class=\"hljs-property\">UTILITY\u003C/span>);\n\n\u003Cspan class=\"hljs-comment\">// 사용\u003C/span>\n\u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;glow(20) c(blue-500)&quot;\u003C/span>&gt;\u003C/span>\n  빛나는 텍스트\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3>커스텀 토큰 패턴\u003C/h3>\n\n  \u003Cpre>\u003Ccode class=\"hljs language-typescript\">\u003Cspan class=\"hljs-comment\">// 새로운 토큰 패턴 추가\u003C/span>\ntokenizer.\u003Cspan class=\"hljs-title function_\">addPattern\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;emoji&#x27;\u003C/span>, \u003Cspan class=\"hljs-regexp\">/:([\\w-]+):/\u003C/span>);\n\n\u003Cspan class=\"hljs-comment\">// 사용\u003C/span>\n\u003Cspan class=\"language-xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;icon(:heart:)&quot;\u003C/span>&gt;\u003C/span>\n  // 파서가 :heart:를 인식\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2>성능 최적화\u003C/h2>\n\u003Col class=\"list(decimal) pl(xl) my(lg)\">\u003Cli>\u003Cstrong>파싱 캐싱\u003C/strong>: 동일한 클래스는 한 번만 파싱\u003C/li>\n\u003Cli>\u003Cstrong>CSS 중복 제거\u003C/strong>: 동일한 스타일은 한 번만 생성\u003C/li>\n\u003Cli>\u003Cstrong>트리 쉐이킹\u003C/strong>: 사용하지 않는 규칙은 번들에서 제외\u003C/li>\n\u003Cli>\u003Cstrong>빌드 타임 최적화\u003C/strong>: 가능한 모든 처리를 빌드 시점에\u003C/li>\n\u003C/ol>\n\u003Ch2>마무리\u003C/h2>\n\u003Cp>AdorableCSS의 파서 시스템은 단순한 문자열 매칭을 넘어 진정한 DSL(Domain Specific Language)을 구현합니다. 이를 통해 Figma의 디자인 개념을 코드로 자연스럽게 표현할 수 있으며, 확장 가능하고 성능이 뛰어난 CSS 프레임워크를 만들 수 있었습니다.\u003C/p>\n",{},"\n      /* Highlight.js Light Theme inspired by GitHub */\n      .hljs { background: rgb(249 250 251); color: #24292e; }\n      .hljs-comment, .hljs-quote { color: #6a737d; }\n      .hljs-keyword, .hljs-selector-tag, .hljs-literal { color: #d73a49; }\n      .hljs-string { color: #032f62; }\n      .hljs-number { color: #005cc5; }\n      .hljs-variable, .hljs-template-variable, .hljs-attr { color: #e36209; }\n      .hljs-name, .hljs-selector-class, .hljs-selector-id { color: #22863a; }\n      .hljs-title, .hljs-function { color: #6f42c1; }\n      .hljs-built_in { color: #005cc5; }\n      .hljs-params { color: #24292e; }\n      .hljs-meta { color: #005cc5; }\n      .hljs-emphasis { font-style: italic; }\n      .hljs-strong { font-weight: bold; }\n      .hljs-deletion { color: #b31d28; background-color: #ffeef0; }\n      .hljs-addition { color: #22863a; background-color: #f0fff4; }\n      \n      /* Code blocks */\n      pre { \n        background-color: rgb(249 250 251);\n        border: 1px solid rgb(229 231 235);\n      }\n      \n      /* Copy button */\n      .copy-btn {\n        background-color: rgb(243 244 246);\n        border: 1px solid rgb(209 213 219);\n        color: rgb(55 65 81);\n      }\n      .copy-btn:hover {\n        background-color: rgb(229 231 235);\n      }\n    "],"uses":{"params":["slug"]}}]}
