{
  "permissions": {
    "allow": [
      "Bash(pnpm build)",
      "Bash(open test-color-gradient.html)",
      "Bash(open:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(pnpm build:*)",
      "Bash(npx tsup:*)",
      "Bash(pnpm dev:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(pnpm check:*)",
      "Bash(find:*)",
      "Bash(sed:*)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(done)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(echo)",
      "Bash(pnpm run:*)",
      "Bash(npm test)",
      "Bash(npx vitest run:*)",
      "Bash(pnpm test:*)",
      "Bash(npx tsx:*)",
      "Bash(npm test:*)",
      "Bash(pnpm add:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(npx sv:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(pnpm --filter adorable-css build)",
      "Bash(node:*)",
      "WebFetch(domain:velog.io)",
      "Bash(pnpm vitest run:*)",
      "WebFetch(domain:css.master.co)",
      "Bash(tree:*)",
      "Bash(timeout 10s pnpm dev --port 5173 --host)",
      "Bash(curl:*)",
      "Bash(echo:*)",
      "WebFetch(domain:www.apple.com)",
      "WebFetch(domain:developer.apple.com)",
      "Bash(pnpm typecheck:*)",
      "Bash(npm run build:*)",
      "Bash(do [ -f \"$file\" ])",
      "Bash(git checkout:*)",
      "Bash(npm run test:*)",
      "Bash(pnpm --filter homepage-kit dev)",
      "WebFetch(domain:localhost)",
      "Bash(pnpm --filter homepage-kit build)",
      "Bash(pnpm remove:*)",
      "WebFetch(domain:atlassian.design)",
      "Bash(pkill:*)",
      "Bash(pnpm preview:*)",
      "Bash(pnpm ls:*)",
      "Bash(pnpm --filter adorable-css-cdn build)",
      "Bash(pnpm install:*)",
      "Bash(pnpm --filter homepage-kit dev:build)",
      "Bash(pnpm list:*)",
      "Bash(do mv \"$f\" \"$f%.mdx.md\")",
      "Bash(pnpm deploy:*)",
      "Bash(npm run deploy:gh-pages:*)",
      "Bash(npx gh-pages:*)",
      "Bash(npm run predeploy:gh-pages:*)",
      "Bash(pnpm --filter adorable-css test layer-priority)",
      "Bash(pnpm --filter adorable-css build --no-dts)",
      "Bash(pnpm --filter adorable-css test layer-composition)",
      "Bash(pnpm --filter adorable-css test scale-test)",
      "Bash(pnpm --filter adorable-css exec node -e \"const { transformRules } = require(''./dist/index.js''); console.log(''scale empty:'', transformRules.scale(''''))\")",
      "Bash(pnpm --filter adorable-css check)",
      "Bash(pnpm --filter adorable-css test scale-test --run)",
      "Bash(true)",
      "WebFetch(domain:svelte.dev)",
      "Bash(pnpm --filter adorable-css test src/__tests__/auto-inject.test.ts)",
      "Bash(pnpm --filter adorable-css test generator-tokens)",
      "WebFetch(domain:www.practical-ui.com)",
      "Bash(pnpm --filter adorable-css test src/__tests__/grid.test.ts)",
      "Bash(-e 's/text-primary/c(primary)/g' )",
      "Bash(-e 's/text-secondary/c(neutral-600)/g' )",
      "Bash(-e 's/text-subtle/c(neutral-500)/g' )",
      "Bash(-e 's/hover:c(primary)/hover:c(primary)/g' )",
      "Bash(-e 's/hover:c(neutral-600)/hover:c(neutral-600)/g' )",
      "Bash(src/routes/(empty)/showroom/+page.svelte)",
      "Bash(pnpm --filter adorable-css test --run src/__tests__/primitives/badge.test.ts)",
      "Bash(pnpm --filter adorable-css test --run -t \"badge\")",
      "Bash(pnpm --filter adorable-css test --run -t \"badge component\")",
      "Bash(pnpm --filter adorable-css test --run -t \"display\")",
      "Bash(pnpm --filter adorable-css test src/__tests__/color-alpha.test.ts)",
      "Bash(pnpm --filter adorable-css test src/__tests__/semantic-colors.test.ts)",
      "Bash(pnpm --filter adorable-css test)",
      "Bash(git reset:*)",
      "Bash(pnpm --filter adorable-css test src/__tests__/components/code.test.ts)",
      "Bash(pnpm --filter adorable-css test semantic-color-system.test.ts)",
      "Bash(pnpm --filter adorable-css test src/__tests__/rules/text/font.test.ts)",
      "Bash(pnpm --filter adorable-css test src/__tests__/rules/style/font.test.ts --run)",
      "Bash(pnpm --filter adorable-css test src/__tests__/vbox-textalign.test.ts --run)",
      "Bash(pnpm --filter adorable-css test src/__tests__/rules/text/truncate.test.ts)",
      "Bash(pnpm --filter adorable-css test src/__tests__/integration/truncate.test.ts)",
      "Bash(pnpm --filter adorable-css test src/__tests__/rules/style/text.test.ts)",
      "Bash(pnpm --filter adorable-css test src/__tests__/integration/text-nowrap.test.ts)",
      "Bash(pnpm lint:*)",
      "Bash(npx eslint:*)",
      "Bash(pnpm --filter adorable-css test:check)",
      "Bash(pnpm --filter adorable-css test src/**/*.test.ts --run)",
      "Bash(pnpm --filter adorable-css lint)",
      "Bash(npx unimported:*)",
      "Bash(npx ts-prune:*)",
      "Bash(npm run lint)",
      "Bash(npx vite build:*)",
      "Bash(pnpm tsx:*)",
      "Bash(pnpm find-unused:*)",
      "Bash(pnpm knip:*)",
      "Bash(npx knip:*)",
      "Bash(pnpm eslint:*)",
      "Bash(chmod:*)",
      "Bash(./fix-imports.sh)",
      "Bash(../../fix-imports.sh)",
      "Bash(pnpm --filter adorable-css-lint build)",
      "Bash(gtimeout:*)",
      "Bash(timeout:*)"
    ],
    "deny": []
  }
}